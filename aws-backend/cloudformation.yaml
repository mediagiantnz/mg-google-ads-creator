AWSTemplateFormatVersion: '2010-09-09'
Description: 'Google Ads Campaign Creator Infrastructure - Media Giant'

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - dev
      - prod
    Description: Environment name

Resources:
  # DynamoDB Table
  CampaignJobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'mg-googleads-campaign-jobs-${Environment}'
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      AttributeDefinitions:
        - AttributeName: jobId
          AttributeType: S
      KeySchema:
        - AttributeName: jobId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: ClientName
          Value: MediaGiant
        - Key: Project
          Value: Google Ads

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'mg-googleads-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt CampaignJobsTable.Arn
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:mg-googleads-oauth-credentials-*'
        - PolicyName: DynamoDBStreamAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: !GetAtt CampaignJobsTable.StreamArn
      Tags:
        - Key: ClientName
          Value: MediaGiant
        - Key: Project
          Value: Google Ads

  # Lambda Function - Parse MD File
  ParseMDFileLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'mg-googleads-parse-md-${Environment}'
      Runtime: nodejs18.x
      Handler: parse-md-file.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Placeholder - deploy actual code' })
            };
          };
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref CampaignJobsTable
      Tags:
        - Key: ClientName
          Value: MediaGiant
        - Key: Project
          Value: Google Ads

  # Lambda Function - Get Job Status
  GetJobStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'mg-googleads-get-status-${Environment}'
      Runtime: nodejs18.x
      Handler: get-job-status.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Placeholder - deploy actual code' })
            };
          };
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref CampaignJobsTable
      Tags:
        - Key: ClientName
          Value: MediaGiant
        - Key: Project
          Value: Google Ads

  # Lambda Function - Create Campaigns
  CreateCampaignsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'mg-googleads-create-campaigns-${Environment}'
      Runtime: nodejs18.x
      Handler: create-campaigns.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Placeholder - deploy actual code' })
            };
          };
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          TABLE_NAME: !Ref CampaignJobsTable
      Tags:
        - Key: ClientName
          Value: MediaGiant
        - Key: Project
          Value: Google Ads

  # DynamoDB Stream Event Source Mapping
  StreamEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt CampaignJobsTable.StreamArn
      FunctionName: !Ref CreateCampaignsLambda
      StartingPosition: LATEST
      MaximumBatchingWindowInSeconds: 10

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'mg-googleads-api-${Environment}'
      Description: Google Ads Campaign Creator API
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: ClientName
          Value: MediaGiant
        - Key: Project
          Value: Google Ads

  # API Gateway Resources
  ParseResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: parse

  StatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: status

  StatusJobIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref StatusResource
      PathPart: '{jobId}'

  # API Gateway Methods
  ParseMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ParseResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ParseMDFileLambda.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  StatusMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref StatusJobIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.jobId: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetJobStatusLambda.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # CORS Configuration
  ParseOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ParseResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  StatusOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref StatusJobIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda Permissions
  ParseLambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ParseMDFileLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  StatusLambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetJobStatusLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ParseMethod
      - StatusMethod
      - ParseOptionsMethod
      - StatusOptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

  # Secrets Manager Secret (placeholder for OAuth credentials)
  GoogleAdsOAuthSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'mg-googleads-oauth-credentials-${Environment}'
      Description: Google Ads OAuth credentials
      SecretString: |
        {
          "client_id": "REPLACE_WITH_CLIENT_ID",
          "client_secret": "REPLACE_WITH_CLIENT_SECRET",
          "refresh_token": "REPLACE_WITH_REFRESH_TOKEN",
          "developer_token": "REPLACE_WITH_DEVELOPER_TOKEN"
        }
      Tags:
        - Key: ClientName
          Value: MediaGiant
        - Key: Project
          Value: Google Ads

Outputs:
  ApiUrl:
    Description: API Gateway URL
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'
  
  DynamoDBTableName:
    Description: DynamoDB Table Name
    Value: !Ref CampaignJobsTable
    Export:
      Name: !Sub '${AWS::StackName}-TableName'
  
  DynamoDBStreamArn:
    Description: DynamoDB Stream ARN
    Value: !GetAtt CampaignJobsTable.StreamArn
    Export:
      Name: !Sub '${AWS::StackName}-StreamArn'